<resources xmlns:tools="http://schemas.android.com/tools">
    <string name="app_name">SimpleestDemo</string>
    <string name="version_name">版本号：v</string>
    <string name="can_not_find_version_name">没有找到版本号</string>
    <string name="cancel">取消</string>
    <string name="share">分享</string>
T
    <!--分享-->
    <string name="wechat">微信</string>
    <string name="wechat_friend_circle">微信朋友圈</string>
    <string name="share_collection">收藏</string>
    <string name="qq">QQ好友</string>
    <string name="qq_zone">QQ空间</string>
    <string name="sina_weibo">新浪微博</string>
    <string name="copy_url">复制链接</string>
    <string name="safari">浏览器打开</string>

    <string name="throttle_first">点击按钮打开新 Activity 是一种常见的实现，但由于 Activity 的异步机制，如果用户不小心连击了按钮，有可能导致 App 连续打开同一个 Activity，不仅给用户带来使用的不便，还让用户觉得『这个软件做得好傻逼耶』。通过 throttleFirst() 方法加入防抖动延时，可以避免这种情况。试试下面两个按钮吧！</string>
    <string name="bt_throttle_first_without">常规实现</string>
    <string name="bt_throttle_first_with">使用 throttleFirst() 去抖动后</string>
    <string name="label_new_activity">我是一个新的 Activity！</string>
    <string name="request_data">请求数据</string>
    <string name="load">加载</string>
    <string name="loading_failed">数据加载失败</string>
    <string name="title_elementary">基本</string>
    <string name="title_map">转换(map)</string>
    <string name="title_zip">压合(zip)</string>
    <string name="page_with_number">第%s页</string>
    <string name="next_page">下一页</string>
    <string name="previous_page">上一页</string>
    <string name="unknow_date">未知日期</string>
    <string name="responsed_data">返回的数据</string>
    <string name="title_token">Token(flatMap)</string>
    <string name="title_token_advanced">Token_高级(retryWhen)</string>
    <string name="invalidate_token">销毁 token</string>
    <string name="title_cache">缓存(BehaviorSubject)</string>
    <string name="loading_time_and_source">耗时：%1$sms(从%2$s)</string>
    <string name="data_source_memory">内存</string>
    <string name="data_source_disk">磁盘</string>
    <string name="data_source_network">网络</string>
    <string name="question_mark">\?</string>
    <string name="dialog_elementary">RxJava 和 Retrofit 结合使用最基本的格式：用 subscribeOn() 和 observeOn() 来控制线程，并通过 subscribe() 来触发网络请求的开始。代码大致形式：\n\napi.getData()\n&#160;&#160;&#160;&#160;.subscribeOn(Schedulers.io())\n&#160;&#160;&#160;&#160;.observeOn(AndroidSchedulers.mainThread())\n&#160;&#160;&#160;&#160;.subscribe(observer);</string>
    <string name="api_source_zhuangbi">* 本页 Sample 使用的 API 来自 <b>装逼大全</b> zhuangbi.info</string>
    <string name="api_source_gank">* 本页 Sample 使用的 API 来自 <b>干货集中营</b> gank.io</string>
    <string name="api_source_zhuangbi_and_gank">* 本页 Sample 使用的 API 来自 <b>装逼大全</b> zhuangbi.info 和 <b>干货集中营</b> gank.io</string>
    <string name="dialog_map">有些服务端的接口设计，会在返回的数据外层包裹一些额外信息，这些信息对于调试很有用，但本地显示是用不到的。使用 map() 可以把外层的格式剥掉，只留下本地会用到的核心格式。代码大致形式：\n\napi.getData()\n&#160;&#160;&#160;&#160;<b>.map(response -> response.data)</b>\n&#160;&#160;&#160;&#160;.subscribeOn(Schedulers.io())\n&#160;&#160;&#160;&#160;.observeOn(AndroidSchedulers.mainThread())\n&#160;&#160;&#160;&#160;.subscribe(observer);\n\n(详见本项目源码)\n\n当然，map() 也可以用于基于其他各种需求的格式转换。</string>
    <string name="dialog_zip">有的时候，app 中会需要同时访问不同接口，然后将结果糅合后转为统一的格式后输出（例如将第三方广告 API 的广告夹杂进自家平台返回的数据 List 中）。这种并行的异步处理比较麻烦，不过用了 zip() 之后就会简单得多。代码大致形式：\n\n<b>Observable.zip(api.getData(),\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;adApi.getAds(), zipFunc())</b>\n&#160;&#160;&#160;&#160;.subscribeOn(Schedulers.io())\n&#160;&#160;&#160;&#160;.observeOn(AndroidSchedulers.mainThread())\n&#160;&#160;&#160;&#160;.subscribe(observer);\n\n(详见本项目源码)</string>
    <string name="dialog_token">出于安全性、性能等方面的考虑，多数服务器会有一些接口需要传入 token 才能正确返回结果，而 token 是需要从另一个接口获取的，这就需要使用两步连续的请求才能获取数据（①token -> ②目标数据）。使用 flatMap() 可以用较为清晰的代码实现这种连续请求，避免 Callback 嵌套的结构。代码大致形式：\n\napi<b>.getToken()\n&#160;&#160;&#160;&#160;.flatMap(token -> api.getData(token))</b>\n&#160;&#160;&#160;&#160;.subscribeOn(Schedulers.io())\n&#160;&#160;&#160;&#160;.observeOn(AndroidSchedulers.mainThread())\n&#160;&#160;&#160;&#160;.subscribe(observer);\n\n(详见本项目源码)</string>
    <string name="api_source_rengwuxian">* 由于找不到足够简单的用于示例的 token API，本页 Sample 使用的 API 是<b>我用代码伪造的</b></string>
    <string name="got_data">获取到的数据：\nID：%1$d\n用户名：%2$s</string>
    <string name="got_token_and_data">token:%1$s\n\n获取到的数据：\nID：%2$d\n用户名：%3$s</string>
    <string name="dialog_token_advanced">有的 token 并非一次性的，而是可以多次使用，直到它超时或被销毁（多数 token 都是这样的）。这样的 token 处理起来比较麻烦：需要把它保存起来，并且在发现它失效的时候要能够自动重新获取新的 token 并继续访问之前由于 token 失效而失败的请求。如果项目中有多处的接口请求都需要这样的自动修复机制，使用传统的 Callback 形式需要写出非常复杂的代码。而使用 RxJava ，可以用 retryWhen() 来轻松地处理这样的问题。代码大致形式：\n\napi<b>.getData(token)\n&#160;&#160;&#160;&#160;.retryWhen(observable ->\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;observable.flatMap( ->\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;api.getToken()\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.doOnNext(->updateToken())))</b>\n&#160;&#160;&#160;&#160;.subscribeOn(Schedulers.io())\n&#160;&#160;&#160;&#160;.observeOn(AndroidSchedulers.mainThread())\n&#160;&#160;&#160;&#160;.subscribe(observer);\n\n(详见本项目源码)</string>
    <string name="token_expired">token 已失效</string>
    <string name="updated">已更新</string>
    <string name="token_destroyed">token 已销毁</string>
    <string name="clearMemoryCache">清空内存缓存</string>
    <string name="clearMemoryAndDiskCache">清空内存和磁盘缓存</string>
    <string name="memory_cache_cleared">内存缓存已清空</string>
    <string name="memory_and_disk_cache_cleared">内存缓存和磁盘缓存都已清空</string>
    <string name="dialog_cache">RxJava 中有一个较少被人用到的类叫做 Subject，它是一种『既是 Observable，又是 Observer』的东西，因此可以被用作中间件来做数据传递。例如，可以用它的子类 BehaviorSubject 来制作缓存。代码大致形式：\n\napi.getData()\n&#160;&#160;&#160;&#160;.subscribe(<b>behaviorSubject</b>); // 网络数据会被缓存\n\n<b>behaviorSubject.subscribe(observer);</b> // 之前的缓存将直接送达 observer\n\n(详见本项目源码)</string>


    <!--LoadingHUD-->
    <string name="loading">加载中...</string>

    <!--PullToRefreshLayout-->
    <string name="pullToRefresh_prepare">下拉以刷新</string>
    <string name="pullToRefresh_recycle">释放以更新</string>
    <string name="pullToRefresh_loading">正在刷新,请等待</string>
    <string name="pullToRefresh_complete">更新完成</string>

    <string name="loadMore_loadingText">加载更多</string>
    <string name="loadMore_noMoreText">没有更多内容了</string>

    <string name="not_network">当前网络不可用</string>
    <string name="fail_request">数据请求失败</string>
    <!--<string name="not_cache">当前请求无缓存</string>-->
    <string name="not_cache"></string>

    <string name="crop__done" translatable="false">确认</string>
    <string name="crop__cancel" translatable="false" tools:ignore="ButtonCase">取消</string>
    <string name="crop__pick_error" translatable="false">No image sources available</string>
    <string name="crop__saving" translatable="false">Saving picture…</string>
    <string name="crop__wait" translatable="false">Please wait…</string>

    <string name="qv_add">+</string>
    <string name="qv_remove">-</string>

    <string name="wallet_custom_amount">自定义金额(元)</string>
    <string name="wallet_et_wallet_custom_amount">0123456789.</string>

    <string name="not_network_try_again">请检查网络后重新尝试</string>

    <string name="hello">Hello World, JPush!</string>
    <string name="tag_hint">Tag为大小写字母，数字，下划线,中文， 多个用以逗号分隔</string>
    <string name="alias_hint">Alias为大小写字母，数字，下划线</string>
    <string name="style_hint">style为数字</string>
    <string name="error_style_empty">style不能为空</string>
    <string name="error_alias_empty">alias不能为空</string>
    <string name="error_tag_empty">tag不能为空</string>
    <string name="error_tag_gs_empty">格式不对</string>
    <string name="error_network">网络连接异常,初始化失败 请检查网络！</string>
    <string name="logining">程序在后台执行, 请查看日志！</string>
    <string name="setting_su">设置成功</string>

    <!--Bugly-->
    <string name="test_crash">测试Crash</string>
    <string name="test_java_crash">测试Java Crash</string>
    <string name="test_anr_crash">测试ANR Crash</string>
    <string name="test_native_crash">测试Native Crash</string>

</resources>
